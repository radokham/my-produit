import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".styles_container__1G6US {\n  position: relative;\n  width: max-content;\n  padding-right: 60px;\n}\n\n.styles_container__1G6US:hover .styles_editButton__h-8z3.styles_hoverToShow__1QXRL {\n  display: block;\n}\n\n.styles_input__1H6_Q {\n  padding: 10px;\n  display: block;\n  font-size: 1em;\n}\n\n.styles_hidden__CVoDj {\n  display: none !important;\n}\n\n.styles_editButton__h-8z3 {\n  position: absolute;\n  right: 0;\n  top: 0;\n  transform: translate(-50%, -30%);\n  border: none;\n  background-color: transparent;\n  color: lightgray;\n  cursor: pointer;\n  width: max-content;\n}\n\n.styles_hoverToShow__1QXRL {\n  display: none;\n}\n\n.styles_editButton__h-8z3:hover {\n  color: gray;\n}\n\n.styles_editButton__h-8z3 > svg {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 1em;\n  height: 1em;\n  fill: lightgray;\n  transform: translateX(100%);\n}\n\n.styles_editButton__h-8z3:hover > svg {\n  fill: gray;\n}\n\n.styles_acceptButton__3LbwX, .styles_rejectButton__12lhC {\n  position: absolute;\n  top: 50%;\n  right: 0;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n}\n\n.styles_acceptButton__3LbwX > svg, .styles_rejectButton__12lhC > svg {\n  width: 1.5em;\n  height: 1.5em;\n  opacity: .7;\n}\n\n.styles_acceptButton__3LbwX {\n  transform: translate(-50%, -50%);\n  fill: green;\n}\n\n.styles_rejectButton__12lhC {\n  transform: translate(70%, -50%);\n  fill: red;\n}\n\n.styles_acceptButton__3LbwX:hover > svg, .styles_rejectButton__12lhC:hover > svg {\n  opacity: 1;\n}";
var styles = { "container": "styles_container__1G6US", "editButton": "styles_editButton__h-8z3", "hoverToShow": "styles_hoverToShow__1QXRL", "input": "styles_input__1H6_Q", "hidden": "styles_hidden__CVoDj", "acceptButton": "styles_acceptButton__3LbwX", "rejectButton": "styles_rejectButton__12lhC" };
styleInject(css);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var EditButton = function (_Component) {
  inherits(EditButton, _Component);

  function EditButton() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, EditButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = EditButton.__proto__ || Object.getPrototypeOf(EditButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      editMode: false,
      inputValue: _this.props.children.props.children,
      prevInputValue: _this.props.children.props.children
    }, _this.handleEditButtonClick = function () {
      console.log('handleEditButtonClick');
      if (_this.props.onEditButtonClick && typeof _this.props.editMode === 'boolean') {
        _this.props.onEditButtonClick();
        _this.input.focus();
      } else {
        _this.setState({ editMode: true }, function () {
          _this.input.focus();
        });
      }
    }, _this.handleOnContainerClick = function () {
      console.log('handleOnContainerClick');
      if (_this.props.onContainerClick && typeof _this.props.editMode === 'boolean') {
        _this.props.onContainerClick();
        _this.input.focus();
      } else {
        console.log("Function for 'OnContainerClick' not provided");
        _this.setState({ editMode: true }, function () {
          _this.input.focus();
        });
      }
    }, _this.handleOnKeyPress = function (e) {
      console.log('handleOnKeyPress');
      if (e.key === 'Enter') {
        _this.onAccept(e);
      }
    }, _this.handleOnKeyDown = function (e) {
      if (e.keyCode === 27) {
        _this.onReject(e);
      }
    }, _this.onAccept = function () {
      var inputValue = typeof _this.props.inputProps['value'] !== 'undefined' ? _this.props.inputProps.value : _this.state.inputValue;
      console.log('onAccept', inputValue);
      _this.props.onAccept(inputValue);
      _this.setState({
        editMode: false,
        prevInputValue: _this.state.inputValue
      });
    }, _this.onReject = function () {
      console.log('onReject', _this.state.prevInputValue);
      if (_this.props.onReject) {
        _this.props.onReject(_this.state.prevInputValue);
      }
      _this.setState({
        editMode: false,
        inputValue: _this.state.prevInputValue
      });
    }, _this.handleInputChange = function (e) {
      _this.setState({ inputValue: e.target.value });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(EditButton, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var handleEditButtonClick = this.handleEditButtonClick,
          handleOnContainerClick = this.handleOnContainerClick,
          handleOnKeyPress = this.handleOnKeyPress,
          handleOnKeyDown = this.handleOnKeyDown,
          onAccept = this.onAccept,
          onReject = this.onReject;
      var _props = this.props,
          containerProps = _props.containerProps,
          inputProps = _props.inputProps,
          editButtonProps = _props.editButtonProps,
          children = _props.children,
          hideEditButton = _props.hideEditButton,
          hoverToShowEditButton = _props.hoverToShowEditButton;
      var placeholder = inputProps.placeholder;


      var inputValue = typeof inputProps['value'] !== 'undefined' ? inputProps.value : this.state.inputValue;
      var onInputChange = typeof inputProps['onChange'] !== 'undefined' ? inputProps.onChange : this.handleInputChange;

      var text = editButtonProps.text,
          icon = editButtonProps.icon;


      var editMode = typeof this.props.editMode === 'undefined' ? this.state.editMode : this.props.editMode;

      var inputClasses = [styles.input];
      if (!editMode) inputClasses.push(styles.hidden);

      var editButtonClasses = [styles.editButton];
      if (hoverToShowEditButton) editButtonClasses.push(styles.hoverToShow);

      {
        return React.createElement(
          'div',
          _extends({ className: ['EditButton', styles.container].join(' ') }, containerProps),
          React.createElement('input', {
            value: inputValue, s: true,
            placeholder: placeholder,
            onChange: onInputChange,
            className: inputClasses.join(' '),
            onKeyPress: handleOnKeyPress,
            onKeyDown: handleOnKeyDown,
            ref: function ref(input) {
              return _this2.input = input;
            }
          }),
          editMode && React.createElement(
            Fragment,
            null,
            React.createElement(
              'button',
              { className: styles.acceptButton, onClick: onAccept },
              React.createElement(
                'svg',
                { xmlns: 'http://www.w3.org/2000/svg', width: '24', height: '24', viewBox: '0 0 24 24' },
                React.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' }),
                React.createElement('path', { d: 'M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z' })
              )
            ),
            React.createElement(
              'button',
              { className: styles.rejectButton, onClick: onReject },
              React.createElement(
                'svg',
                { xmlns: 'http://www.w3.org/2000/svg', width: '24', height: '24', viewBox: '0 0 24 24' },
                React.createElement('path', { d: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' }),
                React.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
              )
            )
          ),
          !editMode && React.createElement(
            Fragment,
            null,
            React.createElement(
              'div',
              { onClick: !editMode ? handleOnContainerClick : null },
              children
            ),
            !hideEditButton && React.createElement(
              'button',
              {
                onClick: handleEditButtonClick,
                className: editButtonClasses.join(' ')
              },
              text || 'Edit',
              icon || React.createElement(
                'svg',
                { xmlns: 'http://www.w3.org/2000/svg', width: '24', height: '24', viewBox: '0 0 24 24' },
                React.createElement('path', { d: 'M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z' }),
                React.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
              )
            )
          )
        );
      }
    }
  }]);
  return EditButton;
}(Component);

EditButton.defaultProps = {
  inputProps: {},
  editButtonProps: {}
};
EditButton.propTypes = {
  children: PropTypes.shape({
    props: PropTypes.shape({
      children: PropTypes.string.isRequired
    }).isRequired
  }).isRequired,
  containerProps: PropTypes.any,
  inputProps: PropTypes.shape({
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    placeholder: PropTypes.string,
    onChange: function onChange(props, propName, componentName) {
      if (typeof props['value'] !== 'undefined' && (props[propName] == undefined || typeof props[propName] != 'function')) {
        return new Error('Please provide an inputProps.onChange function');
      }
    }
  }),
  editButtonProps: PropTypes.shape({
    text: PropTypes.string,
    icon: PropTypes.any
  }),
  onEditButtonClick: function onEditButtonClick(props, propName, componentName) {
    if (props['hideEditButton'] === true) {
      return false;
    } else if (typeof props['editMode'] === 'boolean' && (props[propName] == undefined || typeof props[propName] != 'function') && (props['onContainerClick'] == undefined || typeof props['onContainerClick'] != 'function')) {
      return new Error('Please provide an onEditButtonClick or onContainerClick function');
    }
  },
  onContainerClick: function onContainerClick(props, propName, componentName) {
    if (typeof props['editMode'] === 'boolean' && props['hideEditButton'] === true && (props[propName] == undefined || typeof props[propName] != 'function')) {
      return new Error('Please provide an onContainerClick function');
    } else if (typeof props['editMode'] === 'boolean' && (props[propName] == undefined || typeof props[propName] != 'function') && (props['onEditButtonClick'] == undefined || typeof props['onEditButtonClick'] != 'function')) {
      return new Error('Please provide an onEditButtonClick or onContainerClick function');
    }
  },
  hideEditButton: PropTypes.bool,
  editMode: PropTypes.bool,
  onAccept: PropTypes.func.isRequired,
  onReject: PropTypes.func,
  hoverToShowEditButton: PropTypes.bool
};

export default EditButton;
//# sourceMappingURL=index.es.js.map
